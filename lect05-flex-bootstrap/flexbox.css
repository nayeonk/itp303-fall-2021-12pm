html,body{
	margin: 0;
	padding: 0;
	font-family: 'Oswald', sans-serif;
}
/* The asterisk (*) selectors selects ALL elements in this HTML file. In the CSS rule below, all elements have the property box-sizing set to border-box (so that we don't have to worry about paddings/borders affecting the width of elements) */
* {
	box-sizing: border-box;
}

/* Colors for each box. */
.box1 { background-color: #011627; }
.box2 { background-color: #EB5160; }
.box3 { background-color: #030301; }
.box4 { background-color: #00D9C0; }
.box5 { background-color: #FF0022; }

/* The parent */
.container {
	border: 10px solid skyblue;
	display: flex;
	/* By default, the children flex items will fit the height of its parent */
	height: 500px;

	/* Flex direction property determines the MAIN axis (left to right, right to left, top to bottom, etc) */
	flex-direction: row;

	/* By default, flex items will try to fit onto one line. flex-wrap controls this. changing flex-wrap to wrap will wrap flex items onto multiple lines */
	/* flex-wrap: wrap; */
	flex-wrap: nowrap;
	
	/* Justify content defines alignment along the MAIN axis (MAIN axis is set by flex direction) */
	justify-content: center;

	/* Align items dfines alignment along the CROSS axis (CROSS axis is the opposite of MAIN axis) */
	align-items: flex-end;
}

/* .container's direct children */
.box {
	color: white;
	font-size: 28px;
	/* By default, flexbox will keep the children elements in ONE row. If screen size gets too small to fit all the children elements, it will squish down the children elements to still fit them in one row. */
	width: 100px;

	/* Can still use percentages & margins */
	/* width: 31.33%; */
	/* min-width: 200px; */
	/* padding: 1%; */
	margin: 10px;

	
}
.box2 {
	/* Can use order to change the order placement of a flex item. The flex item with the highest value, will go later. By default, all flex items have the order of 0. */
	order: 1;
}
.box1 {
	order: 9999;
}